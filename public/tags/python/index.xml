<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>python - Tag - Evolving notes on crafting a good life</title>
        <link>http://example.org/tags/python/</link>
        <description>python - Tag - Evolving notes on crafting a good life</description>
        <generator>Hugo -- gohugo.io</generator><language>en_gb</language><lastBuildDate>Fri, 25 Feb 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/python/" rel="self" type="application/rss+xml" /><item>
    <title>Heaps</title>
    <link>http://example.org/heaps/</link>
    <pubDate>Fri, 25 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/heaps/</guid>
    <description><![CDATA[Basics Define a heap.
Heaps are binary trees for which every parent node has a value less than or equal to any of its children.
Load the standard library module that implements heaps. What kind of heaps are supported?
1 2 # heapq implements min heaps. Push *-item* to implement max heap. import heapq Turn the below list into a min-heap.
1 heap = [1, -4, 7, 50] 1 heapq.heapify(heap) Add -1 to the heap.]]></description>
</item>
<item>
    <title>Python string formatting</title>
    <link>http://example.org/python-string-formatting/</link>
    <pubDate>Sat, 11 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-string-formatting/</guid>
    <description><![CDATA[Formatted string literals (f-strings) A basic f-string consists of a combination of literal characters and replacement characters, the latter of which are placed inside braces (full grammar here, useful explanation of how they are parsed here).
The general form for the replacement field is &quot;{&quot; expression [&quot;=&quot;] [&quot;!&quot; conversion] [&quot;:&quot; format_spec] &quot;}&quot;.
1 2 name = &#34;world&#34; f&#34;Hello {name}&#34; 'Hello world' Add = to also print the name of the replacement expression (useful for debugging).]]></description>
</item>
<item>
    <title>Python Decorators</title>
    <link>http://example.org/python-decorators/</link>
    <pubDate>Tue, 23 Mar 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-decorators/</guid>
    <description><![CDATA[My notes on decorator functions (I don&rsquo;t use classes enough to worry about class decorators).
Intro Decorators are functions designed to wrap other functions to enhance their capability at runtime. They do this by replacing the wrapped function with the return value of the decorator. They work as syntactic sugar for decorated = decorator(decorated). Decorators are run when the decorated function is defined, not when it is run (i.e. they run at import time, not runtime).]]></description>
</item>
<item>
    <title>Regex in Python</title>
    <link>http://example.org/python-regex/</link>
    <pubDate>Tue, 23 Mar 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-regex/</guid>
    <description><![CDATA[Raw strings Raw string notation keeps regular expressions sane. re tutorial
Raw strings in Python Just like the regex engine, Python uses \ to escape characters in strings that otherwise have special meaning (e.g. ' and \ itself) and to create tokens with special meaning (e.g. \n).
1 print(&#34;Hello\nWorld&#34;) Hello World Without escaping a single quotation mark, it takes on its special meaning as a delimiter of a string.]]></description>
</item>
</channel>
</rss>
