<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>python - Tag - Evolving notes on crafting a good life</title>
        <link>http://example.org/tags/python/</link>
        <description>python - Tag - Evolving notes on crafting a good life</description>
        <generator>Hugo -- gohugo.io</generator><language>en_gb</language><lastBuildDate>Mon, 28 Feb 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/python/" rel="self" type="application/rss+xml" /><item>
    <title>Python dicts</title>
    <link>http://example.org/python-dictionaries/</link>
    <pubDate>Mon, 28 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-dictionaries/</guid>
    <description><![CDATA[Drills to practice working with Python dictionaries.
Built-in dict Create a dictionary, d, from the two lists below using the dict() constructor.
1 2 keys = [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;] values = range(3) 1 d = dict(zip(keys, values)) Recreate the same dictionary using dictionary comprehension and check that the result is identical to d.
1 2 dd = {key: value for key, value in zip(keys, values)} dd == d What does the below return and why?]]></description>
</item>
<item>
    <title>Heaps</title>
    <link>http://example.org/heaps/</link>
    <pubDate>Fri, 25 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/heaps/</guid>
    <description><![CDATA[Basics Define a heap.
Heaps are binary trees for which every parent node has a value less than or equal to any of its children.
Load the standard library module that implements heaps. What kind of heaps are supported?
1 2 # heapq implements min heaps. Push *-item* to implement max heap. import heapq Turn the below list into a min-heap.
1 heap = [1, -4, 7, 50] 1 heapq.heapify(heap) Add -1 to the heap.]]></description>
</item>
<item>
    <title>Iterators and generators</title>
    <link>http://example.org/iterators-and-generators/</link>
    <pubDate>Sat, 22 Jan 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/iterators-and-generators/</guid>
    <description><![CDATA[Iterators A Python object is described as iterable (adjective) or as an iterable (noun) when it can be iterated over &ndash; when we can process the elements it contains in turn.
An iterator is a value-producing object that returns the content of an iterable on demand one by one as we call next().
We can create an iterator from an iterable using the built-in iter() function.
One (the?) main feature of iterators is that they are lazy: they produce the next item in the sequence only once it is required, which, for large sequences, can save a lot of memory and allow us to process data that doesn&rsquo;t fit into memory all at once.]]></description>
</item>
<item>
    <title>Python built-in heroes</title>
    <link>http://example.org/python-built-in-heroes/</link>
    <pubDate>Mon, 13 Dec 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-built-in-heroes/</guid>
    <description><![CDATA[Operator (docs)
itemgetter() Basic use:
1 2 3 4 5 from operator import itemgetter print(itemgetter(1, 3, 5)(&#34;Watermelon&#34;)) print(itemgetter(slice(5, None))(&#34;Watermelon&#34;)) print(itemgetter(&#34;name&#34;)(dict(name=&#34;Paul&#34;, age=44))) ('a', 'e', 'm') melon Paul Application (from docs):
1 2 3 4 5 6 7 8 9 inventory = [(&#34;apple&#34;, 3), (&#34;banana&#34;, 2), (&#34;pear&#34;, 5), (&#34;orange&#34;, 1)] getcount = itemgetter(1) # get second item from list print(getcount(inventory)) # get second item from each element in list list(map(getcount, inventory)) ('banana', 2) [3, 2, 5, 1] Application: sorting list of dictionaries (from Python Cookbook recipe 1.]]></description>
</item>
<item>
    <title>Python lists</title>
    <link>http://example.org/python-lists/</link>
    <pubDate>Tue, 23 Nov 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-lists/</guid>
    <description><![CDATA[Solve the below tasks and state their time and space complexities.
Basics Define a list.
A list is a finite, ordered, and mutable sequence of elements.
Create a list a containing the letters a, b, and c.
1 a = list(&#34;abc&#34;) Append z.
1 a.append(&#34;z&#34;) Insert x at the second position.
1 a.insert(1, &#34;x&#34;) Append the characters m, n.
1 a.extend(&#34;mn&#34;) Remove the first occurrence of x from the list.]]></description>
</item>
<item>
    <title>Pandas categories</title>
    <link>http://example.org/pandas-categories/</link>
    <pubDate>Thu, 11 Nov 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/pandas-categories/</guid>
    <description><![CDATA[Basics Values and order:
All values of a categorical valiable are either in categories or are np.nan.
Order is defined by the order of categories, not the lexical order of the values.
Memory structure:
Internally, the data structure consists of a categories array and an integer arrays of codes, which point to the values in the categories array.
The memory usage of a categorical variable is proportional to the number of categories plus the length of the data, while that for an object dtype is a constant times the length of the data.]]></description>
</item>
<item>
    <title>Python fundamentals</title>
    <link>http://example.org/python-fundamentals/</link>
    <pubDate>Sun, 10 Oct 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-fundamentals/</guid>
    <description><![CDATA[Data model - everything is an object 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # Everything is an object isinstance(4, object) # =&gt; True isinstance([1, 2], object) # =&gt; True # Objects have identity id(4) # =&gt; 4501558496 (e.g.) # Objects have type type(4) # =&gt; int isinstance(type(4), object) # =&gt; Types are also objects # Objects have value (41).]]></description>
</item>
<item>
    <title>Python string formatting</title>
    <link>http://example.org/python-string-formatting/</link>
    <pubDate>Sat, 11 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-string-formatting/</guid>
    <description><![CDATA[Formatted string literals (f-strings) A basic f-string consists of a combination of literal characters and replacement characters, the latter of which are placed inside braces (full grammar here, useful explanation of how they are parsed here).
The general form for the replacement field is &quot;{&quot; expression [&quot;=&quot;] [&quot;!&quot; conversion] [&quot;:&quot; format_spec] &quot;}&quot;.
1 2 name = &#34;world&#34; f&#34;Hello {name}&#34; 'Hello world' Add = to also print the name of the replacement expression (useful for debugging).]]></description>
</item>
<item>
    <title>Python tricks</title>
    <link>http://example.org/python-tricks/</link>
    <pubDate>Sat, 03 Jul 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-tricks/</guid>
    <description><![CDATA[Switching 0 to 1 and 1 to 0 Using not.
1 2 3 4 flip = lambda x: int(not x) a, b = 1, 0 flip(a), flip(b) (0, 1) Using xor.
1 2 3 4 flip = lambda x: x ^ 1 a, b = 1, 0 flip(a), flip(b) (0, 1) Coercing input to type of something else 1 type(&#34;&#34;)(5) '5' If-else logic in append statement 1 2 3 4 5 6 7 small = [1, 2] large = [11, 12] for x in [3, 4, 13, 14]: (small if x &lt; 10 else large).]]></description>
</item>
<item>
    <title>Python modules and packages</title>
    <link>http://example.org/modules-and-packages/</link>
    <pubDate>Fri, 21 May 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/modules-and-packages/</guid>
    <description><![CDATA[]]></description>
</item>
</channel>
</rss>
