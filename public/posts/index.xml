<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Evolving notes on crafting a good life</title>
        <link>http://example.org/posts/</link>
        <description>All Posts | Evolving notes on crafting a good life</description>
        <generator>Hugo -- gohugo.io</generator><language>en_gb</language><lastBuildDate>Sun, 14 May 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://example.org/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Parenting advice I want to remember</title>
    <link>http://example.org/parenting-principles/</link>
    <pubDate>Sun, 14 May 2023 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/parenting-principles/</guid>
    <description><![CDATA[My wife and I are about to become parents for the first time. In this space, I want to collect a limited number of core pieces of advice I want to remember. They are all from Philippa Perry&rsquo;s wonderful book The book you wish your parents had read, which I can&rsquo;t recommend highly enough to any parent.
Stuff I want to remember:
A child is not a thing I need to manage and train to behave well, but an individual I&rsquo;m building a relationship with.]]></description>
</item>
<item>
    <title>Heaps</title>
    <link>http://example.org/heaps/</link>
    <pubDate>Fri, 25 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/heaps/</guid>
    <description><![CDATA[Basics Define a heap.
Heaps are binary trees for which every parent node has a value less than or equal to any of its children.
Load the standard library module that implements heaps. What kind of heaps are supported?
1 2 # heapq implements min heaps. Push *-item* to implement max heap. import heapq Turn the below list into a min-heap.
1 heap = [1, -4, 7, 50] 1 heapq.heapify(heap) Add -1 to the heap.]]></description>
</item>
<item>
    <title>Python string formatting</title>
    <link>http://example.org/python-string-formatting/</link>
    <pubDate>Sat, 11 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-string-formatting/</guid>
    <description><![CDATA[Formatted string literals (f-strings) A basic f-string consists of a combination of literal characters and replacement characters, the latter of which are placed inside braces (full grammar here, useful explanation of how they are parsed here).
The general form for the replacement field is &quot;{&quot; expression [&quot;=&quot;] [&quot;!&quot; conversion] [&quot;:&quot; format_spec] &quot;}&quot;.
1 2 name = &#34;world&#34; f&#34;Hello {name}&#34; 'Hello world' Add = to also print the name of the replacement expression (useful for debugging).]]></description>
</item>
<item>
    <title>Vim cheatsheet</title>
    <link>http://example.org/vim/</link>
    <pubDate>Sat, 11 Sep 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/vim/</guid>
    <description><![CDATA[Preliminaries I use neovim. My configuration is here. There, I map &lt;esc&gt; to jk, a mapping I also use throughout this file.
I&rsquo;ve remaped Caps Look to &lt;ctrl&gt; on my mac.
Quarto setup &lt;shift-k&gt; to open help on object under cursor, &lt;shift-kk&gt; to ender help window, q to quit help.
Terminal: open new terminal with &lt;leader&gt;c, then activate terminal by going into insert mode and going back to normal mode with usual keybinding.]]></description>
</item>
<item>
    <title>Python Decorators</title>
    <link>http://example.org/python-decorators/</link>
    <pubDate>Tue, 23 Mar 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-decorators/</guid>
    <description><![CDATA[My notes on decorator functions (I don&rsquo;t use classes enough to worry about class decorators).
Intro Decorators are functions designed to wrap other functions to enhance their capability at runtime. They do this by replacing the wrapped function with the return value of the decorator. They work as syntactic sugar for decorated = decorator(decorated). Decorators are run when the decorated function is defined, not when it is run (i.e. they run at import time, not runtime).]]></description>
</item>
<item>
    <title>Regex in Python</title>
    <link>http://example.org/python-regex/</link>
    <pubDate>Tue, 23 Mar 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/python-regex/</guid>
    <description><![CDATA[Raw strings Raw string notation keeps regular expressions sane. re tutorial
Raw strings in Python Just like the regex engine, Python uses \ to escape characters in strings that otherwise have special meaning (e.g. ' and \ itself) and to create tokens with special meaning (e.g. \n).
1 print(&#34;Hello\nWorld&#34;) Hello World Without escaping a single quotation mark, it takes on its special meaning as a delimiter of a string.]]></description>
</item>
<item>
    <title>Unix basics</title>
    <link>http://example.org/unix-basics/</link>
    <pubDate>Thu, 12 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/unix-basics/</guid>
    <description><![CDATA[This is my cheetsheet for all things Unix. I use it to keep track of useful things I learn and want to remember.
Basics A process is a running instance of a program.
Everything is a fiele (the keyboard is read-only, the screen write only)
man &lt;command&gt; opens the manual for &lt;command&gt;.
man -k &lt;search term&gt; lists all commands with &lt;search term&gt; in the manual pages.
Stuff I use often and tend to forget Creating a soft link: ln -s &lt;file&gt; &lt;link&gt;.]]></description>
</item>
<item>
    <title>Documenting Sample Selection</title>
    <link>http://example.org/documenting-sample-selection/</link>
    <pubDate>Wed, 12 Aug 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/documenting-sample-selection/</guid>
    <description><![CDATA[1 2 import numpy as np import pandas as pd Problem I have a dataframe on which I perform a series of data selection steps. What I want is to automatically build a table for the appendix of my paper that tells me the number of users left in the data after each selection step.
Here&rsquo;s a mock dataset:
1 2 3 df = (pd.DataFrame({&#39;user_id&#39;: [1, 2, 3, 4] * 2, &#39;data&#39;: np.]]></description>
</item>
<item>
    <title>Intro</title>
    <link>http://example.org/entropy/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/entropy/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 --- title: &#34;Entropy&#34; date: &#34;2022-01-09&#34; tags: - cs, stats execute: enabled: false --- 1 2 3 4 import math import matplotlib.pyplot as plt import numpy as np Entropy is a measure of the amount of information contained in an event or a random variable. It is a cornerstone of information theory, a subfield of mathematics concerned with the transmission of data across a noisy channel.]]></description>
</item>
</channel>
</rss>
